{"version":3,"sources":["redux/reducer.ts","redux/rootReducer.ts","redux/store.ts","components/todoLictComponent.tsx","components/todoList.tsx","components/todoSort.tsx","components/inputForm.tsx","components/main.tsx","App.tsx","index.tsx"],"names":["createNewTodo","createAsyncThunk","_","a","rejectWithValue","dispatch","fetch","response","json","data","removeSomeTodo","id","deleteHref","method","deleteTodo","switchState","getState","todo","todos","find","e","headers","body","JSON","stringify","completed","console","log","toggleComplete","addNewItem","title","addNewId","newItem","userId","currentId","addTodo","todosReducer","createSlice","name","initialState","sort","status","reducers","state","action","payload","filter","currentItem","addNewCompleted","extraReducers","pending","type","fulfilled","actions","rootReducer","combineReducers","store","configureStore","reducer","useAppSelector","useSelector","useAppDispatch","useDispatch","TodoListComponent","children","child","className","onChange","checked","onClick","TodoList","map","TodoSort","setNewToggle","currentTarget","innerHTML","toLocaleLowerCase","InputForm","useState","text","setText","element","target","value","preventDefault","trim","length","Main","App","ReactDOM","render","document","getElementById"],"mappings":"iPAgBaA,EAAcC,YACvB,qBADuC,uCAEvC,WAAeC,EAAf,oBAAAC,EAAA,+DAAkBC,gBAAlB,EAAkCC,SAAlC,SAC0BC,MALL,uDAIrB,cACUC,EADV,gBAEgCA,EAASC,OAFzC,cAEUC,EAFV,yBAGWA,GAHX,2CAFuC,yDAS9BC,EAAeT,YACxB,sBADwC,uCAExC,WAAgBU,EAAhB,oBAAAR,EAAA,6DAA2BE,EAA3B,EAA2BA,SACjBO,EADV,qDAC0ED,GAD1E,SAEqBL,MAAMM,EAAW,CAC9BC,OAAQ,WAHhB,cAKIR,EAASS,EAAWH,IALxB,2CAFwC,yDAW9BI,EAAYd,YACtB,mBADsC,uCAEtC,WAAgBU,EAAhB,sBAAAR,EAAA,6DAAoBE,EAApB,EAAoBA,SAASW,EAA7B,EAA6BA,SACnBC,EAAwBD,IAAWC,KAAKC,MAAMC,MAAK,SAAAC,GAAC,OAAEA,EAAET,KAAKA,KADvE,SAGqBL,MAAM,8CAAD,OAA+CK,GAAK,CACtEE,OAAQ,QACRQ,QAAQ,CACJ,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAACC,YAAW,OAACR,QAAD,IAACA,OAAD,EAACA,EAAMQ,eARhD,cAUIC,QAAQC,IAAIV,GACZZ,EAASuB,EAAejB,IAX5B,2CAFsC,yDAiB7BkB,EAAW5B,YACpB,kBADoC,uCAEpC,WAAiB6B,EAAjB,sBAAA3B,EAAA,6DAAwBE,EAAxB,EAAwBA,SAASW,EAAjC,EAAiCA,SAC7BX,EAAS0B,KAGHC,EAAiB,CACnBC,OAAQ,IACRtB,GAAIK,IAAWC,KAAKiB,UACpBJ,MAAOA,EACPL,WAAU,GARlB,SAWWnB,MAAM,6CAA6C,CACtDO,OAAO,OACPQ,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUQ,KAhB7B,OAmBI3B,EAAS8B,EAAQH,IAnBrB,2CAFoC,yDA+BlCI,EAAaC,YAAY,CAC3BC,KAAM,OACNC,aAAa,CACTrB,MAAQ,GACRgB,UAAW,IACXM,KAAM,MACNC,OAAO,IAEXC,SAAS,CACDP,QAAQ,SAACQ,EAAUC,GAEbD,EAAMzB,MAAN,sBAAgByB,EAAMzB,OAAtB,CAA4B0B,EAAOC,WAGzC/B,WAAW,SAAC6B,EAAUC,GAClBD,EAAMzB,MAAOyB,EAAMzB,MAAM4B,QAAO,SAAC1B,GAAD,OAAsBA,EAAET,KAAKiC,EAAOC,YAExEd,SAAS,SAACY,GACEA,EAAMT,UAAUS,EAAMT,UAAU,GAE5CN,eAAe,SAACe,EAAUC,GACtB,IAAMG,EAAsBJ,EAAMzB,MAAMC,MAAK,SAACC,GAAD,OAAcA,EAAET,KAAKiC,EAAOC,WACzEE,EAAYtB,WAAWsB,EAAYtB,WAEvCuB,gBAAgB,SAACL,EAAUC,GACH,cAAjBA,EAAOC,QACNF,EAAMH,MAAK,EACY,gBAAjBI,EAAOC,QACbF,EAAMH,MAAK,EAEXG,EAAMH,KAAKI,EAAOC,UAMlCI,eAAa,mBACRjD,EAAckD,QAAQC,MAAM,SAACR,GAC1BA,EAAMF,OAAO,UAFR,cAIRzC,EAAcoD,UAAUD,MAAM,SAACR,EAAUC,GACtCD,EAAMzB,MAAN,sBAAgByB,EAAMzB,OAAtB,YAA+B0B,EAAOC,aALjC,KAUV,EAAmET,EAAaiB,QAAzElB,EAAP,EAAOA,QAAQrB,EAAf,EAAeA,WAAWiB,EAA1B,EAA0BA,SAASH,EAAnC,EAAmCA,eAAeoB,EAAlD,EAAkDA,gBAC1CZ,IAAf,QC/HakB,EAAYC,YAAgB,CACrCtC,KAAMmB,I,OCDGoB,EAAMC,YAAe,CAC9BC,QAASJ,IAGCK,EAAkDC,IAEnDC,EAAiB,kBAAMC,e,OCsBrBC,EApBmB,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,SAC1B3D,EAASwD,IAETI,EAAcD,EAOpB,OACI,sBAAKE,UAAS,kBAAd,UACI,uBAAOf,KAAK,WAAYgB,SALd,WACd9D,EAASU,EAAYkD,EAAMtD,MAIwByD,UAASH,EAAMxC,YAC9D,mBAAGyC,UAAWD,EAAMxC,UAAY,YAAc,cAA9C,SAA8DwC,EAAMnC,QACpE,wBAAQoC,UAAU,gBAAgBG,QAVzB,WACbhE,EAASK,EAAeuD,EAAMtD,MAS1B,6BCDG2D,EArBU,WACrB,IAAM9B,EAAKmB,GAAe,SAAAhB,GAAK,OAAEA,EAAM1B,KAAKuB,QACtCtB,EAAMyC,GAAe,SAAAhB,GAAK,OAAEA,EAAM1B,KAAKC,SAC7C,OACI,qBAAKgD,UAAU,OAAf,SACKhD,EAAMA,EAAM4B,QAAO,SAAA1B,GAChB,MAAU,QAAPoB,EACQpB,EAEAA,EAAEK,YAAce,KAG5B+B,KAAI,SAAAnD,GACJ,OAAQ,cAAC,EAAD,CAA8B4C,SAAU5C,GAAhBA,EAAET,OAClC,QCCA6D,EAfS,WACpB,IAAMhC,EAAKmB,GAAe,SAAAhB,GAAK,OAAEA,EAAM1B,KAAKuB,QACtCnC,EAASwD,IACTY,EAAa,SAACrD,GAChBf,EAAS2C,EAAgB5B,EAAEsD,cAAcC,UAAUC,uBAEvD,OACI,sBAAKV,UAAU,eAAf,UACI,wBAAQA,UAAkB,QAAP1B,EAAa,cAAc,wBAAyB6B,QAASI,EAAhF,iBACA,wBAAQP,WAAkB,IAAP1B,EAAY,cAAc,wBAA0B6B,QAASI,EAAhF,uBACA,wBAAQP,UAAY1B,EAAmB,wBAAd,cAAwC6B,QAASI,EAA1E,6B,QCsBGI,EA/BU,WACrB,IAAMxE,EAASwD,IACf,EAAqBiB,mBAAiB,IAAtC,mBAAOC,EAAP,KAAYC,EAAZ,KAiBD,OAAQ,uBAAMd,UAAU,aAAhB,UACA,uBAAOA,UAAU,mBAAmBC,SAjB7B,SAACc,GACXD,EAAQC,EAAQC,OAAOC,QAgBmCA,MAAOJ,IAC9D,wBAAQb,UAAU,+BACVG,QAhBE,SAACjD,GACdA,EAAEgE,iBACCL,EAAKM,OAAOC,QACXjF,EAASwB,EAAWkD,IAGxBC,EAAQ,KASL,2BAEA,wBAAQd,UAAU,+BACVG,QATU,SAACjD,GACtBA,EAAEgE,iBACF/E,EAASL,MAMN,uCCLIuF,EAbK,WAEhB,OACI,sBAAKrB,UAAU,UAAf,UACQ,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCFDsB,EATI,WAGjB,OACI,cAAC,EAAD,K,MCHNC,IAASC,OACR,cAAC,IAAD,CAAUlC,MAAOA,EAAjB,SACI,cAAC,EAAD,MAIHmC,SAASC,eAAe,W","file":"static/js/main.8fb87316.chunk.js","sourcesContent":["import {\r\n    createSlice,\r\n    createAsyncThunk,\r\n    PayloadAction\r\n} from \"@reduxjs/toolkit\";\r\n\r\nimport {store} from \"./store\";\r\n\r\nexport interface TodoItem{\r\n    userId: number|string,\r\n    id: number,\r\n    title: string,\r\n    completed:boolean\r\n}\r\nconst currentHref:string='https://jsonplaceholder.typicode.com/todos?_limit=5'\r\n\r\nexport const createNewTodo=createAsyncThunk(\r\n    'todo/createNewTodo',\r\n    async function(_,{rejectWithValue,dispatch}){\r\n        const response= await fetch(currentHref);\r\n        const data:TodoItem[]=await response.json()\r\n        return data\r\n    }\r\n)\r\n\r\nexport const removeSomeTodo=createAsyncThunk(\r\n    'todo/removeSomeTodo',\r\n    async function (id:number,{dispatch}){\r\n        const deleteHref:string=`https://jsonplaceholder.typicode.com/todos/${id}`\r\n        const resp=await fetch(deleteHref,{\r\n            method: 'DELETE'\r\n        })\r\n        dispatch(deleteTodo(id))\r\n    }\r\n)\r\n\r\nexport const  switchState=createAsyncThunk<any,any,{state: ReturnType<typeof store.getState>}>(\r\n    'todo/switchState',\r\n    async function (id,{dispatch,getState}){\r\n        const todo:TodoItem|undefined=getState().todo.todos.find(e=>e.id===id)\r\n\r\n        const resp=await fetch(`https://jsonplaceholder.typicode.com/todos/${id}`,{\r\n            method: 'PATCH',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({completed: !todo?.completed})\r\n        })\r\n        console.log(todo)\r\n        dispatch(toggleComplete(id))\r\n    }\r\n)\r\n\r\nexport const addNewItem=createAsyncThunk<any,string,{state: ReturnType<typeof store.getState>}>(\r\n    'todo/addNewItem',\r\n    async function  (title,{dispatch,getState}){\r\n        dispatch(addNewId())\r\n\r\n\r\n        const newItem:TodoItem={\r\n            userId: '1',\r\n            id: getState().todo.currentId,\r\n            title: title,\r\n            completed:false\r\n        }\r\n\r\n         await fetch('https://jsonplaceholder.typicode.com/todos',{\r\n            method:\"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newItem)\r\n        })\r\n\r\n        dispatch(addTodo(newItem))\r\n\r\n    }\r\n)\r\ntype MyState={\r\n    todos: TodoItem[]|string,\r\n    currentId:string|number,\r\n    sort:string|boolean,\r\n    status:string\r\n}\r\nconst todosReducer=createSlice({\r\n    name: 'todo',\r\n    initialState:{\r\n        todos:  [] as TodoItem[],\r\n        currentId: 547 as number,\r\n        sort: 'all' as string|boolean,\r\n        status:'' as string\r\n    },\r\n    reducers:{\r\n            addTodo:(state:any,action:PayloadAction<TodoItem>)=>{\r\n\r\n                  state.todos=[...state.todos,action.payload]\r\n\r\n            },\r\n            deleteTodo:(state:any,action:PayloadAction<number>)=>{\r\n                state.todos= state.todos.filter((e:TodoItem):boolean=>e.id!==action.payload)\r\n            },\r\n            addNewId:(state:any)=>{\r\n                        state.currentId=state.currentId+1;\r\n            },\r\n            toggleComplete:(state:any,action:PayloadAction<number>)=>{\r\n                const currentItem:TodoItem= state.todos.find((e:TodoItem)=>e.id===action.payload)\r\n                currentItem.completed=!currentItem.completed\r\n            },\r\n            addNewCompleted:(state:any,action:PayloadAction<string|boolean>)=>{\r\n                if(action.payload==='completed'){\r\n                    state.sort=true\r\n                }else  if(action.payload==='incompleted'){\r\n                    state.sort=false\r\n                }else{\r\n                    state.sort=action.payload\r\n                }\r\n\r\n\r\n            }\r\n    },\r\n    extraReducers:{\r\n        [createNewTodo.pending.type]:(state:any)=>{\r\n            state.status='load'\r\n        },\r\n        [createNewTodo.fulfilled.type]:(state:any,action:PayloadAction<any>)=>{\r\n            state.todos=[...state.todos,...action.payload]\r\n}\r\n    }\r\n\r\n});\r\nexport const {addTodo,deleteTodo,addNewId,toggleComplete,addNewCompleted}=todosReducer.actions\r\nexport default todosReducer.reducer\r\n\r\n\r\n","import {combineReducers} from \"@reduxjs/toolkit\";\r\nimport todosReducer from './reducer'\r\n\r\n\r\nexport const rootReducer=combineReducers({\r\n    todo: todosReducer\r\n})","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport {rootReducer} from \"./rootReducer\";\r\nimport{useDispatch,useSelector,TypedUseSelectorHook} from \"react-redux\";\r\n\r\nexport const store=configureStore({\r\n    reducer: rootReducer\r\n})\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport  const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()","import React, {PropsWithChildren} from \"react\";\r\nimport {useAppDispatch} from \"../redux/store\";\r\nimport {removeSomeTodo, switchState} from \"../redux/reducer\";\r\n\r\ninterface IProps{\r\n    userId: number|string,\r\n    id: number,\r\n    title: string,\r\n    completed:boolean\r\n}\r\n\r\n\r\nconst  TodoListComponent:React.FC=({children}:PropsWithChildren<any>)=>{\r\n    const dispatch=useAppDispatch()\r\n\r\n    const child: IProps=children\r\n    const removeItem=()=>{\r\n        dispatch(removeSomeTodo(child.id))\r\n    }\r\n    const toggleState=()=>{\r\n        dispatch(switchState(child.id))\r\n    }\r\n    return(\r\n        <div className={`list-component `}>\r\n            <input type='checkbox'  onChange={toggleState} checked={child.completed?true:false}/>\r\n            <p className={child.completed ? 'completed' : 'incompleted'}>{child.title}</p>\r\n            <button className='delete-button' onClick={removeItem}>delete Todo</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoListComponent;","import React from 'react'\r\nimport { useAppSelector} from \"../redux/store\";\r\nimport TodoListComponent from \"./todoLictComponent\";\r\n\r\nconst TodoList: React.FC=()=>{\r\n    const sort=useAppSelector(state=>state.todo.sort)\r\n    const todos=useAppSelector(state=>state.todo.todos)\r\n    return(\r\n        <div className='list'>\r\n            {todos?todos.filter(e=> {\r\n                if(sort==='all'){\r\n                    return e\r\n                }else{\r\n                    return e.completed === sort\r\n                }\r\n\r\n            }).map(e=> {\r\n               return  <TodoListComponent key={e.id} children={e}/>\r\n            }):null}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport {useAppDispatch, useAppSelector} from \"../redux/store\";\r\nimport {addNewCompleted} from \"../redux/reducer\";\r\n\r\nconst TodoSort:React.FC=()=>{\r\n    const sort=useAppSelector(state=>state.todo.sort)\r\n    const dispatch=useAppDispatch()\r\n    const setNewToggle=(e:React.MouseEvent)=>{\r\n        dispatch(addNewCompleted(e.currentTarget.innerHTML.toLocaleLowerCase()))\r\n    }\r\n    return(\r\n        <div className='button-block'>\r\n            <button className={sort==='all'?'currentSort':'button-block__element'} onClick={setNewToggle} >All</button>\r\n            <button className={sort===true?'currentSort':'button-block__element'}  onClick={setNewToggle}>Completed</button>\r\n            <button className={!sort?'currentSort':'button-block__element'}  onClick={setNewToggle}>Incompleted</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoSort","import React, {useState} from \"react\";\r\nimport {useAppDispatch} from \"../redux/store\";\r\nimport {addNewItem, createNewTodo} from \"../redux/reducer\";\r\n\r\n\r\nconst InputForm:React.FC=()=>{\r\n    const dispatch=useAppDispatch()\r\n    const [text,setText]=useState<string>('')\r\n    const addText=(element:React.BaseSyntheticEvent)=>{\r\n        setText(element.target.value)\r\n    }\r\n    const createTodo=(e:React.BaseSyntheticEvent)=>{\r\n        e.preventDefault()\r\n        if(text.trim().length){\r\n            dispatch(addNewItem(text))\r\n        }\r\n\r\n        setText('')\r\n    }\r\n\r\n    const getTodosFromServer=(e:React.BaseSyntheticEvent)=>{\r\n        e.preventDefault()\r\n        dispatch(createNewTodo())\r\n    }\r\n   return( <form className='input-form'>\r\n           <input className='input-form-input' onChange={addText} value={text} />\r\n           <button className='input-form-button add-button'\r\n                   onClick={createTodo}>Add some todo</button>\r\n           <button className='input-form-button get-button'\r\n                   onClick={getTodosFromServer}>Get todos from server</button>\r\n   </form>\r\n\r\n\r\n   )\r\n}\r\n\r\nexport default InputForm;","import React from \"react\";\r\nimport TodoList from \"./todoList\";\r\nimport TodoSort from \"./todoSort\";\r\nimport InputForm from \"./inputForm\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Main:React.FC=()=>{\r\n\r\n    return(\r\n        <div className='content'>\r\n                <InputForm />\r\n                <TodoSort/>\r\n                <TodoList />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nimport Main from \"./components/main\";\r\n\r\n\r\nconst App:React.FC=()=>{\r\n\r\n\r\n  return(\r\n      <Main />\r\n  )\r\n\r\n}\r\n\r\nexport default App ;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './style/style.scss'\r\nimport {store} from './redux/store'\r\nimport {Provider} from \"react-redux\";\r\nReactDOM.render(\r\n <Provider store={store}>\r\n     <App />\r\n </Provider>\r\n\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}